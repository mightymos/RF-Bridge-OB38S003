esphome:
  name: sonoff-rf-bridge
  friendly_name: Sonoff RF Bridge
  
  # we try to issue software reset to 8051 microcontroller through UART
  # whenever ESP8285 resets or powers on so they are both in an initial known state
  # (note: firmware on microcontroller must have been flashed to support)
  on_boot:
      then:
      - rf_bridge.send_raw: 
          raw: 'AAFE55'

esp8266:
  # esp01_1m also seems to work, however it is physically an esp8285 chip in the sonoff bridge
  board: esp8285

# Enable logging
logger:
  baud_rate: 0

ota:
 - platform: esphome
   password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sonoff-Rf-Bridge"
    password: !secret api_password

captive_portal:
 
uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200

  # this shows raw bytes in log (can be viewed in terminal over wifi)
  debug:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

  services:
  # code can be sent as integer or as a hex. not clear what difference it makes
    - service: send_rf_code
      variables:
        sync: int
        low:  int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low:  !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'
    - service: send_rf_code_raw
      variables:
        raw: string
      then:
        - rf_bridge.send_raw:
            raw: !lambda 'return raw;'
    - service: learn
      then:
        - rf_bridge.learn


rf_bridge:
  # mainly provides output in logs to observe received codes
  on_code_received:
    then:
        - homeassistant.event:
            event: esphome.rf_code_received
            data:
              # we use hex but int() can be used alternatively
              sync: !lambda 'return format_hex(data.sync);'
              low:  !lambda 'return format_hex(data.low);'
              high: !lambda 'return format_hex(data.high);'
              code: !lambda 'return format_hex(data.code);'
                
        # door sensor (example)
        # syntax shown here: https://esphome.io/automations/actions.html
        - if:
            condition:
              # change the string here for your particular door sensor
              lambda: "return data.code == 0x35720A;"
            then:
              - binary_sensor.template.publish: 
                  id: door_sensor_example
                  state: ON
        - if:
            condition:
              lambda: "return data.code == 0x35720E;"
            then:
              - binary_sensor.template.publish: 
                  id: door_sensor_example
                  state: OFF


  # Portisch only, does not do anything on RCswitch firmware
  on_advanced_code_received:
    then:
      - homeassistant.event:
          event: esphome.rf_advanced_code_received
          data:
            length: !lambda 'return format_hex(data.length);'
            protocol: !lambda 'return format_hex(data.protocol);'
            code: !lambda 'return data.code;'



button:
  # restart the ESP8285 wifi chip
  - platform: restart
    name: "Restart"
  
  # sending ACK can be useful for resetting uart state machine on microcontroller
  - platform: template
    name: Acknowledge
    id: ack_mcu
    on_press:
      then:
        rf_bridge.send_raw:
          raw: 'AAA055'
        
  # places portisch flashed microcontroller into various modes
  # commands are defined here: https://github.com/Portisch/RF-Bridge-EFM8BB1/wiki
  - platform: template
    name: Advanced sniffing start
    id: AS_start
    on_press:
      then:
        - rf_bridge.start_advanced_sniffing

  - platform: template
    name: Advanced sniffing stop
    id: AS_stop
    on_press:
      then:
        - rf_bridge.stop_advanced_sniffing    

  - platform: template
    name: Bucket sniffing start
    id: BS_start
    on_press:
      then:
        - rf_bridge.start_bucket_sniffing 

  # beep for 100 milliseconds
  - platform: template
    name: Beep
    id: Beep
    on_press:
      then:
        - rf_bridge.beep:
            duration: 100

  # reset microcontroller feature was added to RF-Bridge-OB38S003 custom firmware
  - platform: template
    name: "restart radio"
    id: mcu_reset
    on_press:
      then:
      - rf_bridge.send_raw: 
          raw: 'AAFE55'

  # learning mode
  - platform: template
    name: "learning mode"
    id: learning
    on_press:
      then:
      - rf_bridge.learn  

# Sensors for ESPHome version and WIFI information
text_sensor:
  # ESPHome version
  - platform: version
    hide_timestamp: true
    name: "ESPHome Version"
  # IP address and connected SSID
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:wifi
    ssid:
      name: "Connected SSID"
      icon: mdi:wifi-strength-2
      
sensor:
  # WiFi signal
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 120s
  - platform: uptime
    name: Sonoff RF Bridge Uptime
    
binary_sensor:
  - platform: status
    name: Sonoff RF Bridge Status
    
# door sensor
  - platform: template
    name: "Door Sensor (example)"
    id: door_sensor_example
    device_class: door
    publish_initial_state : true

# at first this shows warning/error/wifi status and then reverts to being controllable as a regular LED
light:
  - platform: status_led
    name: "Status LED"
    initial_state:
      state: ON
    pin: 
      number: GPIO13
      inverted: true


switch:

  # example adapted from LED strip using standard protocol installed in oven range
  - platform: template
    id: range01
    name: "Transmit (by timing)"
    optimistic: true
    turn_on_action: 
      - rf_bridge.send_code:
      
          # made these times equal for on/off even though when sniffed they would vary a little
          sync: 0x2F1A
          low:  0x0184
          high: 0x048C
          code: 0x00C301    
    turn_off_action: 
      - rf_bridge.send_code:
          sync: 0x2F1A 
          low:  0x0184 
          high: 0x048C 
          code: 0x00C303
  
  # same example but using protocol ID (times will be different)
  - platform: template
    id: range02
    name: "Transmit (by protocol ID)"
    optimistic: true
    turn_on_action: 
      - rf_bridge.send_advanced_code:
          length: 0x04
          protocol: 0x01
          code: "00C301"
    turn_off_action: 
      - rf_bridge.send_advanced_code:
          length: 0x04
          protocol: 0x01
          code: "00C303"
          
    # these standard timings should be easily decoded by another receiver, so useful to test radio transmit functionality
    # sync low = 0x2, bit 0 = 0x81, bit 1 = 0x90, sync high = 0x8
    # modify to send 0xDEADBE = 0b11011110 10101101 10111110
    # rfraw AA B0 21 03 08 0138 03B7 277C 29 09 08 19 09 09 09 08 19 08 19 08 19 09 08 19 09 08 19 09 09 09 09 08 18 55
  - platform: template
    id: sim_door_sensor
    name: "Door sensor (replay)"
    optimistic: true
    turn_on_action:
      - rf_bridge.send_raw:
          raw: 'AAB0210308013803B7277C2909081909090908190819081909081909081909090909081855'

    turn_off_action:
      - rf_bridge.send_raw:
          raw: 'AAB0210308013803B7277C2909081909090908190819081909081909081909090909081855'

          

# example window blinds using Bitbucket sending.
# Works on Portisch firmware only.
cover:
  - platform: time_based
    name: "Living room blinds"
    device_class: blind
    open_action:
      - rf_bridge.send_raw: 
          raw: 'AAB04C0408137702440111139B38192A192A1A1A19292A192A1A19292929292A1A1A1A1A192A19292A1A192A192A1A1A1A1A1A1A1A192A1A1A1A1A1A1A1A1A1A1A1A192A1929292A192A1A1929292955'
    open_duration: 26.26s
    close_action:
      - rf_bridge.send_raw: 
          raw: 'AAB04C0408137E0249010E139C38192A192A1A1A19292A192A1A19292929292A1A1A1A1A192A19292A1A192A192A1A1A1A1A1A1A1A192A1A1A1A1A1A1A1A1A192A1A1A1A192929292A19292929292955'
    close_duration: 25.99s
    stop_action:
      - rf_bridge.send_raw: 
          raw: 'AAB08F0408137502490111139F38192A192A1A1A19292A192A1A19292929292A1A1A1A1A192A19292A1A192A192A1A1A1A1A1A1A1A192A1A1A1A1A1A1A1A1A1A192A1A1A1929292A192929292929295538192A192A1A1A19292A192A1A19292929292A1A1A1A1A192A19292A1A192A192A1A1A1A1A1A1A1A192A1A1A1A1A1A1A1A1A1A192A1A1A1929292A1929292929292955'
    has_built_in_endstop: true
    assumed_state: false